// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(nanoid())
  name            String
  email           String          @unique
  password        String
  birthDay        DateTime
  imageURL        String?
  panels          Panel[]
  dataFonts       DataFont[]
  feedbacks       Feedback[]
  favoriteQueries FavoriteQuery[]
  // geoData         GeoData[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("USERS")
}

model Panel {
  id          String   @id @default(nanoid())
  name        String
  description String?
  imageURL    String?
  layout      Json?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  views       View[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("PANELS")
}

enum TypeOfStorage {
  DATABASE
  FILE
}

enum DataProvider {
  POSTGRESQL
  CSV
}

model DataFont {
  id              String          @id @default(nanoid())
  name            String
  typeOfStorage   TypeOfStorage
  provider        DataProvider
  accessKey       String?
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  views           View[]
  favoriteQueries FavoriteQuery[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("DATAFONTS")
}

enum ViewType {
  PIECHART
  BARCHART
  LINECHART
  DONUTCHART
  AREACHART
  MAPCHART
  HORIZONTALBARCHART
  WATERFALLCHART
  KPICHART
  NUMBERVIEW
  SELECTFILTER
}

enum ViewContentUpdate {
  STATIC
  DYNAMIC
}

model View {
  id                 String              @id @default(nanoid())
  name               String
  type               ViewType
  contentUpdate      ViewContentUpdate
  sql                String?
  pieChart           PieChart?
  barChart           BarChart?
  lineChart          LineChart?
  areaChart          AreaChart?
  donutChart         DonutChart?
  mapChart           MapChart?
  waterfallChart     WaterfallChart?
  kpiChart           KPIChart?
  horizontalBarChart HorizontalBarChart?
  numberView         NumberView?
  selectFilter       SelectFilter?
  panel              Panel               @relation(fields: [panelId], references: [id], onDelete: Cascade)
  panelId            String
  datafont           DataFont            @relation(fields: [datafontId], references: [id])
  datafontId         String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@map("VIEWS")
}

model PieChart {
  id          String   @id @default(nanoid())
  labelColumn String
  valueColumn String
  view        View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("PIE_CHART")
}

model BarChart {
  id           String   @id @default(nanoid())
  labelColumn  String
  valueColumns String[]
  view         View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("BAR_CHART")
}

model LineChart {
  id           String   @id @default(nanoid())
  labelColumn  String
  valueColumns String[]
  view         View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("LINE_CHART")
}

model AreaChart {
  id           String   @id @default(nanoid())
  labelColumn  String
  valueColumns String[]
  view         View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("AREA_CHART")
}

model MapChart {
  id            String   @id @default(nanoid())
  labelColumn   String
  valueColumn   String
  view          View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId        String   @unique
  associatedMap String?
  fileContent   Json?
  fileName      String?
  hoverDescription String[]
  colors String[]
  maxValue Int
  label String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("MAP_CHART")
}

model NumberView {
  id                    String   @id @default(nanoid())
  labelColumn           String
  subTitle              String?
  isPercentage          Boolean
  numberOfDecimalPlaces Int?
  view                  View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId                String   @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("NUMBER_VIEW")
}

model SelectFilter {
  id          String   @id @default(nanoid())
  labelColumn String
  filterViews String[]
  view        View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("SELECT_FILTER")
}

enum FeedbackType {
  BUG
  IDEA
  SUPPORT
}

model Feedback {
  id        String       @id @default(nanoid())
  text      String
  type      FeedbackType
  imageURL  String?
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("FEEDBACKS")
}

model FavoriteQuery {
  id         String   @id @default(nanoid())
  sql        String
  name       String
  datafont   DataFont @relation(fields: [datafontId], references: [id])
  datafontId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("FAVORITE_QUERIES")
}

model DonutChart {
  id          String   @id @default(nanoid())
  labelColumn String
  valueColumn String
  view        View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("DONUT_CHART")
}

model HorizontalBarChart {
  id           String   @id @default(nanoid())
  labelColumn  String
  valueColumns String[]
  view         View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("HORIZONTAL_BAR_CHART")
}

model WaterfallChart {
  id           String   @id @default(nanoid())
  labelColumn  String
  valueColumns String[]
  view         View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("WATERFALL_CHART")
}

model KPIChart {
  id           String   @id @default(nanoid())
  labelColumn  String
  valueColumns String[]
  view         View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
  viewId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("KPI_CHART")
}
